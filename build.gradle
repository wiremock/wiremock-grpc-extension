buildscript {
  repositories {
    maven {
      url "https://oss.sonatype.org"
    }
    mavenCentral()
  }
}

plugins {
  id 'java-library'
  id 'signing'
  id 'maven-publish'
  id 'idea'
  id 'eclipse'
  id 'project-report'
  id 'com.diffplug.spotless' version '6.22.0'
  id "com.google.protobuf" version "0.9.4"
  id 'io.github.gradle-nexus.publish-plugin' version "1.3.0"
}

repositories {
  mavenLocal()
  mavenCentral()
}

group 'org.wiremock'

allprojects {
  version = "0.4.0"

  sourceCompatibility = 11
  targetCompatibility = 11

  ext {
    versions = [
      wiremock: "3.2.0",
      grpc    : "1.59.0",
      protobuf: "3.25.0"
    ]

    repoUser = this.hasProperty('sonatypeUser') ? sonatypeUser : 'default'
    repoPassword = this.hasProperty('sonatypePassword') ? sonatypePassword : 'default'

    pomInfo = {
      name 'WireMock Extension for gRPC'
      url 'https://wiremock.org'
      scm {
        connection 'https://github.com/wiremock/wiremock-grpc-extension.git'
        developerConnection 'https://github.com/wiremock/wiremock-grpc-extension.git'
        url 'https://github.com/wiremock/wiremock-grpc-extension'
      }
      licenses {
        license {
          name 'The Apache Software License, Version 2.0'
          url 'http://www.apache.org/license/LICENSE-2.0.txt'
          distribution 'repo'
        }
      }
      developers {
        developer {
          id 'tomakehurst'
          name 'Tom Akehurst'
        }
      }
    }
  }
}

spotless {
  java {
    target 'src/**/*.java'
    googleJavaFormat('1.17.0')
    licenseHeaderFile "${rootDir}/gradle/spotless.java.license.txt"
    ratchetFrom 'origin/main'
    trimTrailingWhitespace()
    endWithNewline()
    targetExclude '**/Tmp*.java'
  }
  groovyGradle {
    target '**/*.gradle'
    greclipse()
    indentWithSpaces(2)
    trimTrailingWhitespace()
    endWithNewline()
  }
  json {
    target 'src/**/*.json'
    targetExclude '**/tmp*.json', 'src/test/resources/sample.json', 'src/main/resources/swagger/*.json', 'src/test/resources/filesource/subdir/deepfile.json', 'src/test/resources/schema-validation/*.json'
    simple().indentWithSpaces(2)
  }
}

dependencies {
  api "org.wiremock:wiremock:$versions.wiremock"

  api platform("io.grpc:grpc-bom:$versions.grpc")
  api "io.grpc:grpc-protobuf"
  api "io.grpc:grpc-stub"

  implementation "io.grpc:grpc-servlet-jakarta"
  implementation "com.google.protobuf:protobuf-java-util:$versions.protobuf"

  implementation 'javax.annotation:javax.annotation-api:1.3.2'

  //  testImplementation project(":")
  testImplementation(platform('org.junit:junit-bom:5.10.1'))
  testImplementation "org.junit.jupiter:junit-jupiter"
  testImplementation "org.hamcrest:hamcrest-core:2.2"
  testImplementation "org.hamcrest:hamcrest-library:2.2"
  testImplementation 'org.awaitility:awaitility:4.2.0'

  testImplementation "io.grpc:grpc-okhttp"
}

task sourcesJar(type: Jar, dependsOn: classes) {
  archiveClassifier.set('sources')
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  archiveClassifier.set('javadoc')
  from javadoc.destinationDir
}

task testJar(type: Jar, dependsOn: testClasses) {
  archiveClassifier.set('tests')
  from sourceSets.test.output
}

signing {
  // Docs: https://github.com/wiremock/community/blob/main/infra/maven-central.md
  required {
    !version.toString().contains("SNAPSHOT") && (gradle.taskGraph.hasTask("uploadArchives") || gradle.taskGraph.hasTask("publish") || gradle.taskGraph.hasTask("publishToMavenLocal"))
  }
  def signingKey = providers.environmentVariable("OSSRH_GPG_SECRET_KEY").orElse("").get()
  def signingPassphrase = providers.environmentVariable("OSSRH_GPG_SECRET_KEY_PASSWORD").orElse("").get()
  if (!signingKey.isEmpty() && !signingPassphrase.isEmpty()) {
    println "Using PGP key from env vars"
    useInMemoryPgpKeys(signingKey, signingPassphrase)
  } else {
    println "Using default PGP key"
  }

  sign(publishing.publications)
}

publishing {
  repositories {
    maven {
      name = "GitHubPackages"
      url = "https://maven.pkg.github.com/wiremock/wiremock-grpc-extension"
      credentials {
        username = System.getenv("GITHUB_ACTOR")
        password = System.getenv("GITHUB_TOKEN")
      }
    }
  }

  publications {
    main(MavenPublication) { publication ->
      from components.java
      artifact sourcesJar
      artifact javadocJar
      artifact testJar

      pom.packaging 'jar'
      pom.withXml {
        asNode().appendNode('description', 'Mock gRPC services with WireMock')
        asNode().children().last() + pomInfo
      }
    }
  }
}

test {
  useJUnitPlatform()
  testLogging {
    events "PASSED", "FAILED", "SKIPPED"
    exceptionFormat "full"
  }
}

assemble.dependsOn clean, jar

publishMainPublicationToMavenLocal.dependsOn jar
publishMainPublicationToGitHubPackagesRepository.dependsOn jar

task addGitTag {
  doLast {
    println "git tag ${version}".execute().text
    println "git push origin --tags".execute().text
  }
}

task localRelease {
  dependsOn clean, assemble, publishToMavenLocal
}

protobuf {
  protoc {
    artifact = "com.google.protobuf:protoc:3.25.0"
  }

  plugins {
    grpc {
      artifact = "io.grpc:protoc-gen-grpc-java:$versions.grpc"
    }
  }
  generateProtoTasks {
    all()*.plugins {
      grpc {
        outputSubDir = 'java'
      }
    }

    all().each { task ->
      task.generateDescriptorSet = true
      task.descriptorSetOptions.path = "$projectDir/src/test/resources/wiremock/grpc/services.dsc"
      task.descriptorSetOptions.includeImports = true
    }
  }
}

processTestResources.dependsOn generateProto
processTestResources.dependsOn generateTestProto

nexusPublishing {
  // See https://github.com/wiremock/community/blob/main/infra/maven-central.md
  repositories {
    sonatype {
      def envUsername = providers.environmentVariable("OSSRH_USERNAME").orElse("").get()
      def envPassword = providers.environmentVariable("OSSRH_TOKEN").orElse("").get()
      if (!envUsername.isEmpty() && !envPassword.isEmpty()) {
        username.set(envUsername)
        password.set(envPassword)
      }
    }
  }
}
