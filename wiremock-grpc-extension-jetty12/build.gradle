buildscript {
  repositories {
    maven {
      url "https://oss.sonatype.org"
    }
    mavenCentral()
  }
}

plugins {
  id 'java-library'
  id 'java-test-fixtures'
  id 'signing'
  id 'maven-publish'
  id 'idea'
  id 'eclipse'
  id 'project-report'
  id 'com.diffplug.spotless' version '6.25.0'
  id 'com.github.johnrengelman.shadow' version '8.1.1'
  id "com.google.protobuf" version "0.9.4"
}

repositories {
  mavenLocal()
  mavenCentral()
}

group 'org.wiremock'

dependencies {
  api project(":"), {
    exclude group: 'org.eclipse.jetty'
    exclude group: 'org.eclipse.jetty.http2'
  }
  api "org.wiremock:wiremock-jetty12:$versions.wiremock"

  testImplementation(testFixtures(project(":")), {
    exclude group: 'org.eclipse.jetty'
    exclude group: 'org.eclipse.jetty.http2'
  })
}

task sourcesJar(type: Jar, dependsOn: classes) {
  archiveClassifier.set('sources')
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  archiveClassifier.set('javadoc')
  from javadoc.destinationDir
}

task testJar(type: Jar, dependsOn: testClasses) {
  archiveClassifier.set('tests')
  from sourceSets.test.output
}

publishing {
  repositories {
    maven {
      name = "GitHubPackages"
      url = "https://maven.pkg.github.com/wiremock/wiremock-grpc-extension"
      credentials {
        username = System.getenv("GITHUB_ACTOR")
        password = System.getenv("GITHUB_TOKEN")
      }
    }
  }

  publications {
    main(MavenPublication) { publication ->
      from components.java
      artifact sourcesJar
      artifact javadocJar
      artifact testJar

      pom.packaging 'jar'
      pom.withXml {
        asNode().appendNode('description', 'Mock gRPC services with WireMock')
        asNode().children().last() + pomInfo
      }
    }
  }
}

signing {
  // Docs: https://github.com/wiremock/community/blob/main/infra/maven-central.md
  required {
    !version.toString().contains("SNAPSHOT") && (gradle.taskGraph.hasTask("uploadArchives") || gradle.taskGraph.hasTask("publish") || gradle.taskGraph.hasTask("publishToMavenLocal"))
  }
  def signingKey = providers.environmentVariable("OSSRH_GPG_SECRET_KEY").orElse("").get()
  def signingPassphrase = providers.environmentVariable("OSSRH_GPG_SECRET_KEY_PASSWORD").orElse("").get()
  if (!signingKey.isEmpty() && !signingPassphrase.isEmpty()) {
    println "Using PGP key from env vars"
    useInMemoryPgpKeys(signingKey, signingPassphrase)
  } else {
    println "Using default PGP key"
  }

  sign publishing.publications
}

assemble.dependsOn clean, shadowJar
publishMainPublicationToMavenLocal.dependsOn jar
publishMainPublicationToGitHubPackagesRepository.dependsOn jar


task localRelease {
  dependsOn clean, assemble, publishToMavenLocal
}


test {
  useJUnitPlatform()
  testLogging {
    events "PASSED", "FAILED", "SKIPPED"
    exceptionFormat "full"
  }
}

protobuf {
  protoc {
    artifact = "com.google.protobuf:protoc:4.27.5"
  }

  plugins {
    grpc {
      artifact = "io.grpc:protoc-gen-grpc-java:$versions.grpc"
    }
  }
  generateProtoTasks {
    all()*.plugins {
      grpc {
        outputSubDir = 'java'
      }
    }

    all().each { task ->
      task.generateDescriptorSet = true
      task.descriptorSetOptions.path = "$projectDir/src/test/resources/wiremock/grpc/services.dsc"
    }
  }
}

processTestResources.dependsOn generateProto
processTestResources.dependsOn generateTestProto
